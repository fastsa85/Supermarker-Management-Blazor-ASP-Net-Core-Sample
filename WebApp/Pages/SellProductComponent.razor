@inject IGetProductByIdUseCase GetProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase

@if(SelectedProduct != null)
{    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    } 

    <EditForm Model="SelectedProduct" OnValidSubmit="SellProduct">
        <div class="form-group">
            <label for="name">Product Name</label>
            <input id="name" class="form-control" type="text" readonly value="@productToSell.Name"/>
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <input id="price" class="form-control" type="text" readonly value="@productToSell.Price"/>
        </div>
        <div class="form-group">
            <label for="quantity">Product Quantity</label>
            <InputNumber id="quantity" @bind-Value="@productToSell.Quantity" class="form-control"/>
        </div>

        <button type="submit" class="btn btn-primary">Sell</button>
    </EditForm>   
}


@code {
    private Product productToSell;

    private string errorMessage = string.Empty;

    [Parameter]
    public string CashierName { get; set; }

    [Parameter]
    public Product SelectedProduct { get; set; }

    [Parameter]
    public EventCallback<Product> OnProductSold { get; set; }

    private void SellProduct()
    {
        var product = GetProductByIdUseCase.Execute(productToSell.ProductId);
        if( product.Quantity >= productToSell.Quantity)
        {
            if (string.IsNullOrWhiteSpace(CashierName)) 
            throw new ApplicationException("Cashier's name is missing, cannot sell product");
            
            errorMessage = string.Empty;
            SellProductUseCase.Execute(productToSell.ProductId, productToSell.Quantity.Value, CashierName);
            OnProductSold.InvokeAsync(productToSell);
        }
        else if(product.Quantity <= 0)
        {
            errorMessage = "Quantity has to be greater that zero.";
        }
        else
        {
            errorMessage = $"{product.Name} only has {product.Quantity} items left";
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (SelectedProduct != null)
        {
            productToSell = SelectedProduct.Clone();
            productToSell.Quantity = 1;
        }        
    }
}
