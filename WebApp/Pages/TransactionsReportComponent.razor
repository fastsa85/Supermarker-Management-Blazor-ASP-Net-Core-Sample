@page "/transactions"
@attribute [Authorize(Policy = "AdminOnly")]

@inject IJSRuntime JSRuntime
@inject IGetTransactionsUseCase GetTransactionsUseCase
@inject IGetCashiersUseCase GetCashiersUseCase;

<h3>Transactions Report</h3>

<div class="row">
    <div class="form-group">
        <label for="name">Cashier</label>
        <select id="cashier" @bind="cashierName" class="form-control">
            <option disabled selected hidden>Select Cashier</option>
            @foreach(var cashier in cashiers)
            {
                <option value="@cashier.UserName">@cashier.UserName</option>
            }
        </select>        
    </div>

    <div class="col-4">
        <label for="startdate">Start Date</label>
        <input type="date" id="startdate" class="form-control" @bind-value="startDate"/>
    </div>    
    <div class="col-4">
        <label for="enddate">End Date</label>
        <input type="date" id="enddate" class="form-control" @bind-value="endTime"/>
    </div>
    <div class="col-1">
        <label>&nbsp;</label>
        <button type="button" class="btn btn-primary form-control" @onclick="LoadTransactions">Search</button>
    </div>
    <div class="col-1">
        <label>&nbsp;</label>
        <button type="button" class="btn btn-primary form-control" @onclick="PrintReport">Print</button>
    </div>
</div>

@if (transactions != null)
{
    <div id="printarea">
        <table class="table">
            <thead>
                <tr>
                    <th>Time</th>
                    <th>Cashier Name</th>
                    <th>Product</th>
                    <th>Quantity Before</th>
                    <th>Quantity Sold</th>
                    <th>Quantity After</th>
                    <th>Sold Amount</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var transaction in transactions)
                {
                    <tr>
                        <td>@transaction.Timestamp.ToString(@"yyyy-MM-dd hh\:mm\:ss")</td>
                        <td>@transaction.CashierName</td>
                        <td>@transaction.ProductName</td>
                        <td>@transaction.BeforeQuantity</td>
                        <td>@transaction.SoldQuantity</td>
                        <td>@(transaction.BeforeQuantity - transaction.SoldQuantity)</td>
                        <td>@(transaction.SoldQuantity * transaction.Price)</td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="5">&nbsp;</td>
                    <td>
                        <b>
                            Grand Total:
                        </b>
                    </td>
                    <td>
                        <b>
                            @(transactions.Sum(x => x.Price * x.SoldQuantity))
                        </b>                
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>    
}

@code {
    private string cashierName;
    private DateTime startDate;
    private DateTime endTime;
    private IEnumerable<Transaction> transactions;
    private IEnumerable<IdentityUser> cashiers;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        cashiers = await GetCashiersUseCase.ExecuteAsync();
        StateHasChanged();        
    }

    protected override void OnInitialized()
    {
        cashiers = new List<IdentityUser>();

        startDate = DateTime.Today;
        endTime = DateTime.Today;
    }

    public void LoadTransactions()
    {
        transactions = GetTransactionsUseCase.Execute(startDate, endTime, cashierName);
        StateHasChanged();
    }

    public void PrintReport()
    {
        JSRuntime.InvokeVoidAsync("print");
    }
}
