@inject IViewCategoriesUseCase ViewCategoriesUseCase
@inject IViewProductsByCategoryUseCase ViewProductsByCategoryUseCase

<h3>Select Product For Selling</h3>

<div class="form-group">
    <label for="name">Category</label>
    <select id="category" @bind="SelectedCategoryId" class="form-control">
        <option disabled selected hidden>Select Category</option>
        @foreach(var category in categories)
        {
            <option value="@category.CategoryId">@category.Name</option>
        }
    </select>        
</div>

@if(productsInCategory != null)
{
<table class="table">
    <thead>
        <tr>
            <th>Product Name</th>
            <th>Quantity Left</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var product in productsInCategory)
        {
            <tr @onclick = "@(() => OnSelectProduct(product))" 
                style="@(product.ProductId == selectedProductId?"background-color:beige; cursor:pointer;" : "cursor:pointer")">
                <td>@product.Name</td>
                <td>@product.Quantity</td>
            </tr>
        }        
    </tbody>
</table>
}       

@code {
    private IEnumerable<Category> categories;

    private IEnumerable<Product> productsInCategory;

    [Parameter]
    public EventCallback<Product> OnPoductSelected { get; set; }

    private int selectedCategoryId;
    private int selectedProductId;

    private int SelectedCategoryId 
    { 
        get => selectedCategoryId;
        set
        {
            selectedCategoryId = value;
            productsInCategory = ViewProductsByCategoryUseCase.Execute(value);            
        }
    }

    private void OnSelectProduct(Product product)
    {
        OnPoductSelected.InvokeAsync(product);
        if(product != null) selectedProductId = product.ProductId;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        categories = ViewCategoriesUseCase.Execute();
    }
}
