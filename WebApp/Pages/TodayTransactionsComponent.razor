@inject IGetTodayTransactionsUseCase GetTodayTransactionsUseCase

<h3>Today's Transactions</h3>

@if (transactions != null)
{
    <table class="table">
    <thead>
        <tr>
            <th>Time</th>
            <th>Cashier Name</th>
            <th>Product</th>
            <th>Quantity Before</th>
            <th>Quantity Sold</th>
            <th>Quantity After</th>
            <th>Sold Amount</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var transaction in transactions)
        {
            <tr>
                <td>@transaction.Timestamp.TimeOfDay.ToString(@"hh\:mm\:ss")</td>
                <td>@transaction.CashierName</td>
                <td>@transaction.ProductName</td>
                <td>@transaction.BeforeQuantity</td>
                <td>@transaction.SoldQuantity</td>
                <td>@(transaction.BeforeQuantity - transaction.SoldQuantity)</td>
                <td>@(transaction.SoldQuantity * transaction.Price)</td>
            </tr>
        }
    </tbody>
    </table>
}


@code {
    private IEnumerable<Transaction> transactions;

    public void LoadTransactions(string cashierName)
    {
        transactions = GetTodayTransactionsUseCase.Execute(cashierName);
        StateHasChanged();
    }
}
